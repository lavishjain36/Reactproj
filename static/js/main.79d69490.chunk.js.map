{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","console","log","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"8NAceA,EAZJ,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,KAAKC,EAAY,EAAZA,MAAMC,EAAM,EAANA,GAExB,OACM,yBAAKC,UAAU,uDACf,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,6BACA,4BAAKF,GACL,2BAAIC,MCmBKK,EAxBC,SAAC,GAAY,IAAXC,EAAU,EAAVA,OAMjB,OACC,6BAEDA,EAAOC,KAAI,SAACC,EAAKC,GAChB,OACG,kBAAC,EAAD,CACHC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCJLW,EAbC,SAAC,GAA6B,EAA5BC,YAA6B,IAAjBC,EAAgB,EAAhBA,aAC7B,OACC,yBAAKX,UAAU,OACX,2BACAA,UAAU,mCACVY,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCADI,EAPF,SAACC,GACb,OACO,yBAAKC,MAAO,CAACC,SAAS,SAASC,OAAQ,kBAAkBC,OAAQ,WAC/DJ,EAAMK,WCgBDC,E,kDAjBd,WAAYN,GAAO,IAAD,8BACjB,cAAMA,IACDO,MAAM,CACVC,UAAS,GAHO,E,8DAMAC,EAAMC,GACvBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAIzB,OAAGG,KAAKJ,MAAMC,SACN,sDAEDG,KAAKX,MAAMK,a,GAfQQ,aCkDRC,G,wDA3Cb,aAAc,IAAD,8BACZ,gBAaHC,eAAe,SAACC,GACf,EAAKJ,SAAS,CAAClB,YAAYsB,EAAMC,OAAOC,SAbtC,EAAKX,MAAM,CACVnB,OAAO,GACPM,YAAa,IAEdyB,QAAQC,IAAI,eANA,E,gEASO,IAAD,OAClBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAU,EAAKb,SAAS,CAACxB,OAAOqC,S,+BAQjC,IAAD,EACoBd,KAAKJ,MAAzBnB,EADA,EACAA,OAAOM,EADP,EACOA,YACRgC,EAAetC,EAAOuC,QAAO,SAAAC,GACjC,OAAOA,EAAM/C,KAAKgD,cAAcC,SAASpC,EAAYmC,kBAGvD,OAAIzC,EAAO2C,OAIV,yBAAK/C,UAAU,MACf,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWW,aAAcgB,KAAKI,iBAC9B,kBAAC,EAAD,KACA,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAU3B,OAAQsC,OARX,2C,GA5BSb,cCGDmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVJC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACA,kBAAC,EAAD,OAEAC,SAASC,eAAe,SDuHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAtC,GACLU,QAAQV,MAAMA,EAAMuC,a","file":"static/js/main.79d69490.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card=({ name,email,id})=>{\r\n\t//const {name,email,id}=props;\r\n\treturn(\r\n       <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n       <img alt='robots' src={`https://robohash.org/${id}?200*200`}/>\r\n       <div>\r\n       <h2>{name}</h2>\r\n       <p>{email}</p>\r\n       </div>\r\n       </div>\r\n      );\r\n}\r\nexport default Card;","\timport React from 'react';\r\n\timport Card from './Card';\r\n\r\n\r\n\tconst CardList =({robots})=>{\r\n\t\t/*\r\n\t\tif(true){\r\n\t\t\tthrow new Error(\"NOoooo\");\r\n\t\t}\r\n\t\t*/\r\n\t\treturn(\r\n\t\t\t<div>\r\n\t\t\t{\r\n\t\trobots.map((user,i)=>{\r\n\t\t\treturn(\r\n\t\t    <Card \r\n\t\t\tkey={i} \r\n\t\t\tid={robots[i].id} \r\n\t\t\tname={robots[i].name} \r\n\t\t\temail={robots[i].email} \r\n\t\t\t/>\r\n\t       );\r\n\t\t})\r\n\t  }\r\n\t\t</div>\r\n\t );\r\n\t}\r\n\r\n\texport default CardList;","import React from 'react';\r\n\r\nconst SearchBox=({searchfield,searchChange})=>{\r\n\treturn (\r\n\t <div className='pa2'>\r\n      <input\r\n      className='pa3 ba b--green bg-lightest-blue'\r\n      type='search' \r\n      placeholder='search robots' \r\n      onChange={searchChange}\r\n      />\r\n      </div>\r\n      );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll=(props)=>{\r\n\treturn (\r\n        <div style={{overflow:'scroll',border: '5px solid black',height: '1000px'}}>\r\n         {props.children}\r\n         </div>\r\n\t\t);\r\n};\r\nexport default Scroll;","import React,{Component} from 'react';\r\n\r\n\r\nclass ErrorBoundry extends Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state={\r\n\t\t\thasError:false\r\n\t\t}\r\n\t}\r\n\tcomponentDidCatch(error,info){\r\n\t\tthis.setState({hasError:true})\r\n\t}\r\n\r\nrender(){\r\n\tif(this.state.hasError){\r\n\t\treturn <h1>OOOOps .Thats not good</h1>\r\n\t}\r\n\treturn this.props.children\r\n}\r\n}\r\nexport default ErrorBoundry;","\t\t\timport React, {Component} from 'react';\r\n\t\t\timport CardList from '../components/CardList';\r\n\t\t\timport SearchBox from '../components/SearchBox';\r\n\t\t\timport Scroll from '../components/Scroll';\r\n\t\t\timport ErrorBoundry from '../components/ErrorBoundry';\r\n\t\t\t//import {robots} from './robots';\r\n\t\t\timport './App.css';\r\n\r\n\r\n\t\t\tclass App extends Component{\r\n\t\t\t   constructor(){\r\n\t\t\t   \tsuper()\r\n\t\t\t   \tthis.state={\r\n\t\t\t   \t\trobots:[],\r\n\t\t\t   \t\tsearchfield: ''\r\n\t\t\t   \t}\r\n\t\t\t   \tconsole.log('constructor');\r\n\t\t\t   }\r\n\r\n\t\t\t   componentDidMount(){\r\n\t\t\t   \tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t\t   \t.then(response => response.json())\r\n\t\t\t   \t.then(users => {this.setState({robots:users})});\r\n\t\t\t   }\r\n\t\t\t onSearchChange=(event)=> {\r\n\t\t\t \tthis.setState({searchfield:event.target.value})\r\n\t\t\t \t//console.log(filteredRobots);\r\n\r\n\t\t\t }\r\n\r\n\t\t\trender(){\r\n\t\t\t\tconst {robots,searchfield}=this.state;\r\n\t\t\t\tconst filteredRobots=robots.filter(robot=>{\r\n\t\t\t \t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n\t\t\t\t\t})\r\n\r\n\t\t\t\tif(!robots.length){\r\n\t\t\t\t\treturn <h1>Loading</h1>\r\n\t\t\t\t}else{\r\n\t\t\t\treturn(\r\n\t\t\t\t\t<div className='tc'>\r\n\t\t\t\t\t<h1 className='f1'>RoboFriends</h1>\r\n\t\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\r\n\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t<ErrorBoundry>\r\n\t\t\t\t\t<CardList robots={filteredRobots}/>\r\n\t\t\t\t\t</ErrorBoundry>\r\n\t\t\t\t\t</Scroll>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t);\r\n\t\t\t}\r\n\t\t\t}\r\n\t\t\t}\r\n\t\t\t\texport default App;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\t\timport React from 'react';\n\t\timport ReactDOM from 'react-dom';\n\t\timport './index.css';\n\t\t//import Card from './Card';\n\t\timport App from './containers/App';\n\t\timport * as serviceWorker from './serviceWorker';\n\t\timport 'tachyons';\n\n\t\tReactDOM.render(\n\t\t  <React.StrictMode>\n\t\t  <App/>\n\t\t  </React.StrictMode>,\n\t\t  document.getElementById('root')\n\t\t);\n\n\t\t// If you want your app to work offline and load faster, you can change\n\t\t// unregister() to register() below. Note this comes with some pitfalls.\n\t\t// Learn more about service workers: https://bit.ly/CRA-PWA\n\t\tserviceWorker.unregister();\n"],"sourceRoot":""}